<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>idesktop.cross</artifactId>
        <groupId>com.supermap.idesktop.cross</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>Core</artifactId>

    <!--Packaging = jar 会定义默认的 goal 来打包（maven-jar-plugin），本程序需要自定义打包过程，
    方法一：设置 Packaging = bundle，本程序采用这种方式。
    方法二：使用 maven-bundle-plugin 的 manifest goal，配合 maven-dependency-plugin、maven-resources-plugin 等实现。-->
    <packaging>bundle</packaging>

    <!--<repositories>-->
    <!--<repository>-->
    <!--<id>supermap</id>-->
    <!--<url>http://maven.supermap.io/</url>-->
    <!--</repository>-->
    <!--</repositories>-->

    <dependencies>
        <dependency>
            <groupId>com.supermap.idesktop.cross</groupId>
            <artifactId>iDesktop</artifactId>
            <version>1.0-SNAPSHOT</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.15</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <version>4.5.2</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
        <dependency>
            <groupId>org.swinglabs</groupId>
            <artifactId>swingx</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.12</version>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.2</version>
        </dependency>
        <!--组件依赖-->
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.addressmatching</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.addressmatching.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.navigation</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.navigation.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.networkanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.networkanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.spatialanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.spatialanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.spatialstatistics</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.spatialstatistics.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.terrainanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.terrainanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.analyst.trafficanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.analyst.trafficanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.data.conversion</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.data.conversion.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.data</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.data.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.data.processing</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.data.processing.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.data.topology</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.data.topology.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.layout</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.layout.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.license</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.license.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.mapping</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.mapping.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.realspace</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.realspace.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.realspace.networkanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.realspace.networkanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.realspace.spatialanalyst</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.realspace.spatialanalyst.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.tilestorage</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.tilestorage.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>${objects.groupId}</groupId>
            <artifactId>com.supermap.ui.controls</artifactId>
            <version>${objects.version}</version>
            <scope>system</scope>
            <systemPath>${basedir}/../bin/com.supermap.ui.controls.jar</systemPath>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <!--maven-bundle-plugin 把 bundle 视为可用 classes 的集合，如果有在 src/main/resources/ 之外的
                  非 Java 资源文件，需要自行处理拷贝打包的问题-->
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>3.2.0</version>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-package</id>
                        <phase>package</phase>
                        <inherited>true</inherited>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定 manifest 文件的生成路径，默认为 ${project.build.outputDirectory}/META-INF-->
                    <!--<manifestLocation>${project.build.outputDirectory}/META-INF</manifestLocation>-->
                    <instructions>
                        <Manifest-Version>1.0</Manifest-Version>

                        <!--OSGI R4规范这个值只能是2-->
                        <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
                        <Bundle-Name>Core</Bundle-Name>
                        <Bundle-SymbolicName>Core</Bundle-SymbolicName>
                        <Bundle-Version>${bundle.version}</Bundle-Version>
                        <Bundle-Activator>com.supermap.desktop.core.CoreActivator</Bundle-Activator>

                        <!--打包的资源文件，默认打包 maven 资源目录，也就是 src/main/resources/ 里的内容-->
                        <Include-Resource>{maven-resources}</Include-Resource>

                        <!--1. Requre-Bundle 为导入整个 Bundle，Import-Package 为导入指定的包，Import-Package更为灵活。
                              2. Import-Package 默认为 *，也就是导入所有引用的包，包括配置的依赖，但这些依赖并非 bundle，不能 Import。-->
                        <!--<Require-Bundle></Require-Bundle>-->
                        <Import-Package>
                            org.osgi.framework,
                            org.osgi.util.tracker
                        </Import-Package>

                        <!--Export-Package 和 Private-Package 会将所配置的包以内联（inline）的形式打到包里。-->
                        <!--<Export-Package></Export-Package>-->

                        <!--BND 的 exported 配置，功能与 Exported-Pakcage 一致，只是不处理依赖包的内联（inline），
                        通常与 Embed-Dependency 搭配使用，避免因为 Exported-Package 的依赖内联，导致与 Embed-Dependency
                        的相同包重复。-->
                        <!--由于 Export-Package 会导致被导出的包内联，因此如果 Controls 导出了 Core 里的某些内容，
                        则会导致 Core 的 inline，产生重复，因此使用 exportcontents + Embed-Dependency 来进行更为灵活的处理。-->
                        <_exportcontents>
                            Aladdin,
                            com.alibaba.*,
                            com.supermap.*,
                            org.apache.*,
                            org.jdesktop.*
                        </_exportcontents>

                        <!--Private-Package 默认为源码里 exported 之外的所有包。exported 的优先级高于 private，如果有相同的配置，则 exported 生效-->
                        <!--<Private-Package></Private-Package>-->
                        <Embed-Dependency>*;scope=compile|system</Embed-Dependency>

                        <!--指定 Embed 依赖相对包的根目录的路径-->
                        <Embed-Directory>lib</Embed-Directory>
                    </instructions>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>